
Week4_DMA-Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003144  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080032dc  080032dc  000132dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032fc  080032fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080032fc  080032fc  000132fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003304  08003304  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003304  08003304  00013304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003308  08003308  00013308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800330c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  08003318  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003318  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e31  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001710  00000000  00000000  00027e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  00029580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d8  00000000  00000000  00029d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015210  00000000  00000000  0002a3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a9c  00000000  00000000  0003f5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e1b  00000000  00000000  00048094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cdeaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e10  00000000  00000000  000cdf04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080032c4 	.word	0x080032c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080032c4 	.word	0x080032c4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004d4:	f000 fbcc 	bl	8000c70 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004d8:	f000 f822 	bl	8000520 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004dc:	f000 f952 	bl	8000784 <MX_GPIO_Init>
	MX_DMA_Init();
 80004e0:	f000 f930 	bl	8000744 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80004e4:	f000 f904 	bl	80006f0 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80004e8:	f000 f884 	bl	80005f4 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, ADCData, 4);
 80004ec:	2204      	movs	r2, #4
 80004ee:	4908      	ldr	r1, [pc, #32]	; (8000510 <main+0x40>)
 80004f0:	4808      	ldr	r0, [pc, #32]	; (8000514 <main+0x44>)
 80004f2:	f000 fc73 	bl	8000ddc <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); //set LED = 1 before press B1
 80004f6:	2201      	movs	r2, #1
 80004f8:	2120      	movs	r1, #32
 80004fa:	4807      	ldr	r0, [pc, #28]	; (8000518 <main+0x48>)
 80004fc:	f001 fe2e 	bl	800215c <HAL_GPIO_WritePin>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (T==1){
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <main+0x4c>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b01      	cmp	r3, #1
 8000506:	d1fb      	bne.n	8000500 <main+0x30>
		Run();
 8000508:	f000 f9c8 	bl	800089c <Run>
		if (T==1){
 800050c:	e7f8      	b.n	8000500 <main+0x30>
 800050e:	bf00      	nop
 8000510:	20000028 	.word	0x20000028
 8000514:	20000048 	.word	0x20000048
 8000518:	40020000 	.word	0x40020000
 800051c:	20000044 	.word	0x20000044

08000520 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f002 fec0 	bl	80032b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b28      	ldr	r3, [pc, #160]	; (80005ec <SystemClock_Config+0xcc>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a27      	ldr	r2, [pc, #156]	; (80005ec <SystemClock_Config+0xcc>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <SystemClock_Config+0xd0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <SystemClock_Config+0xd0>)
 800056a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000584:	2310      	movs	r3, #16
 8000586:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058c:	2300      	movs	r3, #0
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000590:	2310      	movs	r3, #16
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000594:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000598:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800059a:	2304      	movs	r3, #4
 800059c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800059e:	2304      	movs	r3, #4
 80005a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fe0a 	bl	80021c0 <HAL_RCC_OscConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x96>
		Error_Handler();
 80005b2:	f000 f9f3 	bl	800099c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005b6:	230f      	movs	r3, #15
 80005b8:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ba:	2302      	movs	r3, #2
 80005bc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2102      	movs	r1, #2
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 f864 	bl	80026a0 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xc2>
		Error_Handler();
 80005de:	f000 f9dd 	bl	800099c <Error_Handler>
	}
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80005fa:	463b      	mov	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000606:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <MX_ADC1_Init+0xec>)
 8000608:	4a36      	ldr	r2, [pc, #216]	; (80006e4 <MX_ADC1_Init+0xf0>)
 800060a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800060c:	4b34      	ldr	r3, [pc, #208]	; (80006e0 <MX_ADC1_Init+0xec>)
 800060e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000612:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000614:	4b32      	ldr	r3, [pc, #200]	; (80006e0 <MX_ADC1_Init+0xec>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800061a:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <MX_ADC1_Init+0xec>)
 800061c:	2201      	movs	r2, #1
 800061e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000620:	4b2f      	ldr	r3, [pc, #188]	; (80006e0 <MX_ADC1_Init+0xec>)
 8000622:	2201      	movs	r2, #1
 8000624:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000626:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <MX_ADC1_Init+0xec>)
 8000628:	2200      	movs	r2, #0
 800062a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062e:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <MX_ADC1_Init+0xec>)
 8000630:	2200      	movs	r2, #0
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <MX_ADC1_Init+0xec>)
 8000636:	4a2c      	ldr	r2, [pc, #176]	; (80006e8 <MX_ADC1_Init+0xf4>)
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063a:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <MX_ADC1_Init+0xec>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 4;
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <MX_ADC1_Init+0xec>)
 8000642:	2204      	movs	r2, #4
 8000644:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000646:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <MX_ADC1_Init+0xec>)
 8000648:	2201      	movs	r2, #1
 800064a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064e:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <MX_ADC1_Init+0xec>)
 8000650:	2201      	movs	r2, #1
 8000652:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000654:	4822      	ldr	r0, [pc, #136]	; (80006e0 <MX_ADC1_Init+0xec>)
 8000656:	f000 fb7d 	bl	8000d54 <HAL_ADC_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000660:	f000 f99c 	bl	800099c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000668:	2301      	movs	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800066c:	2307      	movs	r3, #7
 800066e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000670:	463b      	mov	r3, r7
 8000672:	4619      	mov	r1, r3
 8000674:	481a      	ldr	r0, [pc, #104]	; (80006e0 <MX_ADC1_Init+0xec>)
 8000676:	f000 fca3 	bl	8000fc0 <HAL_ADC_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000680:	f000 f98c 	bl	800099c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000684:	2301      	movs	r3, #1
 8000686:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8000688:	2302      	movs	r3, #2
 800068a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800068c:	463b      	mov	r3, r7
 800068e:	4619      	mov	r1, r3
 8000690:	4813      	ldr	r0, [pc, #76]	; (80006e0 <MX_ADC1_Init+0xec>)
 8000692:	f000 fc95 	bl	8000fc0 <HAL_ADC_ConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0xac>
		Error_Handler();
 800069c:	f000 f97e 	bl	800099c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_ADC1_Init+0xf8>)
 80006a2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 80006a4:	2303      	movs	r3, #3
 80006a6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80006a8:	463b      	mov	r3, r7
 80006aa:	4619      	mov	r1, r3
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <MX_ADC1_Init+0xec>)
 80006ae:	f000 fc87 	bl	8000fc0 <HAL_ADC_ConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC1_Init+0xc8>
		Error_Handler();
 80006b8:	f000 f970 	bl	800099c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 80006bc:	2311      	movs	r3, #17
 80006be:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80006c4:	463b      	mov	r3, r7
 80006c6:	4619      	mov	r1, r3
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_ADC1_Init+0xec>)
 80006ca:	f000 fc79 	bl	8000fc0 <HAL_ADC_ConfigChannel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC1_Init+0xe4>
		Error_Handler();
 80006d4:	f000 f962 	bl	800099c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000048 	.word	0x20000048
 80006e4:	40012000 	.word	0x40012000
 80006e8:	0f000001 	.word	0x0f000001
 80006ec:	10000012 	.word	0x10000012

080006f0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART2_UART_Init+0x4c>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_USART2_UART_Init+0x50>)
 80006f8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_USART2_UART_Init+0x4c>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART2_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000728:	f002 f9b6 	bl	8002a98 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000732:	f000 f933 	bl	800099c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200000f4 	.word	0x200000f4
 8000740:	40004400 	.word	0x40004400

08000744 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_DMA_Init+0x3c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a0b      	ldr	r2, [pc, #44]	; (8000780 <MX_DMA_Init+0x3c>)
 8000754:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_DMA_Init+0x3c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	2038      	movs	r0, #56	; 0x38
 800076c:	f000 ffb3 	bl	80016d6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000770:	2038      	movs	r0, #56	; 0x38
 8000772:	f000 ffcc 	bl	800170e <HAL_NVIC_EnableIRQ>

}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800

08000784 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	4b31      	ldr	r3, [pc, #196]	; (8000864 <MX_GPIO_Init+0xe0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a30      	ldr	r2, [pc, #192]	; (8000864 <MX_GPIO_Init+0xe0>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <MX_GPIO_Init+0xe0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <MX_GPIO_Init+0xe0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a29      	ldr	r2, [pc, #164]	; (8000864 <MX_GPIO_Init+0xe0>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b27      	ldr	r3, [pc, #156]	; (8000864 <MX_GPIO_Init+0xe0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b23      	ldr	r3, [pc, #140]	; (8000864 <MX_GPIO_Init+0xe0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a22      	ldr	r2, [pc, #136]	; (8000864 <MX_GPIO_Init+0xe0>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_GPIO_Init+0xe0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_GPIO_Init+0xe0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <MX_GPIO_Init+0xe0>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <MX_GPIO_Init+0xe0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2120      	movs	r1, #32
 800080e:	4816      	ldr	r0, [pc, #88]	; (8000868 <MX_GPIO_Init+0xe4>)
 8000810:	f001 fca4 	bl	800215c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000814:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000818:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_GPIO_Init+0xe8>)
 800081c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800081e:	2301      	movs	r3, #1
 8000820:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	4811      	ldr	r0, [pc, #68]	; (8000870 <MX_GPIO_Init+0xec>)
 800082a:	f001 fafb 	bl	8001e24 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800082e:	2320      	movs	r3, #32
 8000830:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	4808      	ldr	r0, [pc, #32]	; (8000868 <MX_GPIO_Init+0xe4>)
 8000846:	f001 faed 	bl	8001e24 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	2028      	movs	r0, #40	; 0x28
 8000850:	f000 ff41 	bl	80016d6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000854:	2028      	movs	r0, #40	; 0x28
 8000856:	f000 ff5a 	bl	800170e <HAL_NVIC_EnableIRQ>

}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000
 800086c:	10210000 	.word	0x10210000
 8000870:	40020800 	.word	0x40020800

08000874 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 800087e:	88fb      	ldrh	r3, [r7, #6]
 8000880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000884:	d102      	bne.n	800088c <HAL_GPIO_EXTI_Callback+0x18>
		T=1;
 8000886:	4b04      	ldr	r3, [pc, #16]	; (8000898 <HAL_GPIO_EXTI_Callback+0x24>)
 8000888:	2201      	movs	r2, #1
 800088a:	701a      	strb	r2, [r3, #0]
	}
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	20000044 	.word	0x20000044

0800089c <Run>:

void Run(){
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	PinValue = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80008a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a4:	4833      	ldr	r0, [pc, #204]	; (8000974 <Run+0xd8>)
 80008a6:	f001 fc41 	bl	800212c <HAL_GPIO_ReadPin>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b32      	ldr	r3, [pc, #200]	; (8000978 <Run+0xdc>)
 80008b0:	701a      	strb	r2, [r3, #0]
		if (R == 0) {
 80008b2:	4b32      	ldr	r3, [pc, #200]	; (800097c <Run+0xe0>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d113      	bne.n	80008e2 <Run+0x46>
			if (PinValue == GPIO_PIN_RESET) {  //Press the Button B1
 80008ba:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <Run+0xdc>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d10f      	bne.n	80008e2 <Run+0x46>
				R++;
 80008c2:	4b2e      	ldr	r3, [pc, #184]	; (800097c <Run+0xe0>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	3301      	adds	r3, #1
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b2c      	ldr	r3, [pc, #176]	; (800097c <Run+0xe0>)
 80008cc:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2120      	movs	r1, #32
 80008d2:	482b      	ldr	r0, [pc, #172]	; (8000980 <Run+0xe4>)
 80008d4:	f001 fc42 	bl	800215c <HAL_GPIO_WritePin>
				ButtonTimeStamp = HAL_GetTick();
 80008d8:	f000 fa30 	bl	8000d3c <HAL_GetTick>
 80008dc:	4603      	mov	r3, r0
 80008de:	4a29      	ldr	r2, [pc, #164]	; (8000984 <Run+0xe8>)
 80008e0:	6013      	str	r3, [r2, #0]
			}}
			if (R == 1) {
 80008e2:	4b26      	ldr	r3, [pc, #152]	; (800097c <Run+0xe0>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d12a      	bne.n	8000940 <Run+0xa4>
				if (HAL_GetTick() - ButtonTimeStamp
 80008ea:	f000 fa27 	bl	8000d3c <HAL_GetTick>
 80008ee:	4602      	mov	r2, r0
 80008f0:	4b24      	ldr	r3, [pc, #144]	; (8000984 <Run+0xe8>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	1ad1      	subs	r1, r2, r3
						>= (1000 + (((22695477 * ADCData[0]) + ADCData[1]) % 10000))) {
 80008f6:	4b24      	ldr	r3, [pc, #144]	; (8000988 <Run+0xec>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a24      	ldr	r2, [pc, #144]	; (800098c <Run+0xf0>)
 80008fc:	fb02 f203 	mul.w	r2, r2, r3
 8000900:	4b21      	ldr	r3, [pc, #132]	; (8000988 <Run+0xec>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	441a      	add	r2, r3
 8000906:	4b22      	ldr	r3, [pc, #136]	; (8000990 <Run+0xf4>)
 8000908:	fba3 0302 	umull	r0, r3, r3, r2
 800090c:	0b5b      	lsrs	r3, r3, #13
 800090e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000912:	fb00 f303 	mul.w	r3, r0, r3
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
				if (HAL_GetTick() - ButtonTimeStamp
 800091c:	4299      	cmp	r1, r3
 800091e:	d30f      	bcc.n	8000940 <Run+0xa4>
					R++;
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <Run+0xe0>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	b2da      	uxtb	r2, r3
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <Run+0xe0>)
 800092a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2120      	movs	r1, #32
 8000930:	4813      	ldr	r0, [pc, #76]	; (8000980 <Run+0xe4>)
 8000932:	f001 fc13 	bl	800215c <HAL_GPIO_WritePin>
					ButtonTimeStamp = HAL_GetTick();
 8000936:	f000 fa01 	bl	8000d3c <HAL_GetTick>
 800093a:	4603      	mov	r3, r0
 800093c:	4a11      	ldr	r2, [pc, #68]	; (8000984 <Run+0xe8>)
 800093e:	6013      	str	r3, [r2, #0]
				}
			}
			if (R == 2) {
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <Run+0xe0>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d112      	bne.n	800096e <Run+0xd2>
				if (PinValue == GPIO_PIN_SET) {  // Release the Button B1
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <Run+0xdc>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d10e      	bne.n	800096e <Run+0xd2>
					T = R = 0;
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <Run+0xe0>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <Run+0xe0>)
 8000958:	781a      	ldrb	r2, [r3, #0]
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <Run+0xf8>)
 800095c:	701a      	strb	r2, [r3, #0]
					ReleaseButton = HAL_GetTick() - ButtonTimeStamp;
 800095e:	f000 f9ed 	bl	8000d3c <HAL_GetTick>
 8000962:	4602      	mov	r2, r0
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <Run+0xe8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <Run+0xfc>)
 800096c:	6013      	str	r3, [r2, #0]
				}
			}
		}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40020800 	.word	0x40020800
 8000978:	2000003c 	.word	0x2000003c
 800097c:	200000f0 	.word	0x200000f0
 8000980:	40020000 	.word	0x40020000
 8000984:	20000038 	.word	0x20000038
 8000988:	20000028 	.word	0x20000028
 800098c:	015a4e35 	.word	0x015a4e35
 8000990:	d1b71759 	.word	0xd1b71759
 8000994:	20000044 	.word	0x20000044
 8000998:	20000040 	.word	0x20000040

0800099c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009a4:	e7fe      	b.n	80009a4 <Error_Handler+0x8>
	...

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	4a0f      	ldr	r2, [pc, #60]	; (80009f4 <HAL_MspInit+0x4c>)
 80009b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009bc:	6453      	str	r3, [r2, #68]	; 0x44
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	4a08      	ldr	r2, [pc, #32]	; (80009f4 <HAL_MspInit+0x4c>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009e6:	2007      	movs	r0, #7
 80009e8:	f000 fe6a 	bl	80016c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a2f      	ldr	r2, [pc, #188]	; (8000ad4 <HAL_ADC_MspInit+0xdc>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d157      	bne.n	8000aca <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	4b2e      	ldr	r3, [pc, #184]	; (8000ad8 <HAL_ADC_MspInit+0xe0>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	4a2d      	ldr	r2, [pc, #180]	; (8000ad8 <HAL_ADC_MspInit+0xe0>)
 8000a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a28:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <HAL_ADC_MspInit+0xe0>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <HAL_ADC_MspInit+0xe0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a26      	ldr	r2, [pc, #152]	; (8000ad8 <HAL_ADC_MspInit+0xe0>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <HAL_ADC_MspInit+0xe0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a52:	2303      	movs	r3, #3
 8000a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a56:	2303      	movs	r3, #3
 8000a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	481d      	ldr	r0, [pc, #116]	; (8000adc <HAL_ADC_MspInit+0xe4>)
 8000a66:	f001 f9dd 	bl	8001e24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <HAL_ADC_MspInit+0xe8>)
 8000a6c:	4a1d      	ldr	r2, [pc, #116]	; (8000ae4 <HAL_ADC_MspInit+0xec>)
 8000a6e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <HAL_ADC_MspInit+0xe8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <HAL_ADC_MspInit+0xe8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <HAL_ADC_MspInit+0xe8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <HAL_ADC_MspInit+0xe8>)
 8000a84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a88:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <HAL_ADC_MspInit+0xe8>)
 8000a8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a90:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <HAL_ADC_MspInit+0xe8>)
 8000a94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a98:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_ADC_MspInit+0xe8>)
 8000a9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aa0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <HAL_ADC_MspInit+0xe8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aa8:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <HAL_ADC_MspInit+0xe8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000aae:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <HAL_ADC_MspInit+0xe8>)
 8000ab0:	f000 fe48 	bl	8001744 <HAL_DMA_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000aba:	f7ff ff6f 	bl	800099c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <HAL_ADC_MspInit+0xe8>)
 8000ac2:	639a      	str	r2, [r3, #56]	; 0x38
 8000ac4:	4a06      	ldr	r2, [pc, #24]	; (8000ae0 <HAL_ADC_MspInit+0xe8>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aca:	bf00      	nop
 8000acc:	3728      	adds	r7, #40	; 0x28
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40012000 	.word	0x40012000
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	20000090 	.word	0x20000090
 8000ae4:	40026410 	.word	0x40026410

08000ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a19      	ldr	r2, [pc, #100]	; (8000b6c <HAL_UART_MspInit+0x84>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d12b      	bne.n	8000b62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_UART_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b42:	230c      	movs	r3, #12
 8000b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b52:	2307      	movs	r3, #7
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	; (8000b74 <HAL_UART_MspInit+0x8c>)
 8000b5e:	f001 f961 	bl	8001e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	; 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40004400 	.word	0x40004400
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <NMI_Handler+0x4>

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc4:	f000 f8a6 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000bd0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bd4:	f001 fadc 	bl	8002190 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <DMA2_Stream0_IRQHandler+0x10>)
 8000be2:	f000 feb5 	bl	8001950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000090 	.word	0x20000090

08000bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <SystemInit+0x28>)
 8000bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfa:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <SystemInit+0x28>)
 8000bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <SystemInit+0x28>)
 8000c06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c0a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c22:	e003      	b.n	8000c2c <LoopCopyDataInit>

08000c24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c2a:	3104      	adds	r1, #4

08000c2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c2c:	480b      	ldr	r0, [pc, #44]	; (8000c5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c34:	d3f6      	bcc.n	8000c24 <CopyDataInit>
  ldr  r2, =_sbss
 8000c36:	4a0b      	ldr	r2, [pc, #44]	; (8000c64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c38:	e002      	b.n	8000c40 <LoopFillZerobss>

08000c3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c3c:	f842 3b04 	str.w	r3, [r2], #4

08000c40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c44:	d3f9      	bcc.n	8000c3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c46:	f7ff ffd3 	bl	8000bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4a:	f002 fb0f 	bl	800326c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4e:	f7ff fc3f 	bl	80004d0 <main>
  bx  lr    
 8000c52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c54:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c58:	0800330c 	.word	0x0800330c
  ldr  r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c60:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000c64:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000c68:	20000138 	.word	0x20000138

08000c6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c6c:	e7fe      	b.n	8000c6c <ADC_IRQHandler>
	...

08000c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <HAL_Init+0x40>)
 8000c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_Init+0x40>)
 8000c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <HAL_Init+0x40>)
 8000c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 fd11 	bl	80016c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f000 f808 	bl	8000cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca4:	f7ff fe80 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023c00 	.word	0x40023c00

08000cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_InitTick+0x54>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x58>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 fd29 	bl	800172a <HAL_SYSTICK_Config>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00e      	b.n	8000d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d80a      	bhi.n	8000cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f000 fcf1 	bl	80016d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf4:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <HAL_InitTick+0x5c>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000004 	.word	0x20000004

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000134 	.word	0x20000134

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000134 	.word	0x20000134

08000d54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e033      	b.n	8000dd2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d109      	bne.n	8000d86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff fe40 	bl	80009f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 0310 	and.w	r3, r3, #16
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d118      	bne.n	8000dc4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d9a:	f023 0302 	bic.w	r3, r3, #2
 8000d9e:	f043 0202 	orr.w	r2, r3, #2
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f000 fa3c 	bl	8001224 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f023 0303 	bic.w	r3, r3, #3
 8000dba:	f043 0201 	orr.w	r2, r3, #1
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	641a      	str	r2, [r3, #64]	; 0x40
 8000dc2:	e001      	b.n	8000dc8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d101      	bne.n	8000dfa <HAL_ADC_Start_DMA+0x1e>
 8000df6:	2302      	movs	r3, #2
 8000df8:	e0b1      	b.n	8000f5e <HAL_ADC_Start_DMA+0x182>
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d018      	beq.n	8000e42 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f042 0201 	orr.w	r2, r2, #1
 8000e1e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e20:	4b51      	ldr	r3, [pc, #324]	; (8000f68 <HAL_ADC_Start_DMA+0x18c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a51      	ldr	r2, [pc, #324]	; (8000f6c <HAL_ADC_Start_DMA+0x190>)
 8000e26:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2a:	0c9a      	lsrs	r2, r3, #18
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	4413      	add	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000e34:	e002      	b.n	8000e3c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f9      	bne.n	8000e36 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	f040 8085 	bne.w	8000f5c <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e5a:	f023 0301 	bic.w	r3, r3, #1
 8000e5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d007      	beq.n	8000e84 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e90:	d106      	bne.n	8000ea0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f023 0206 	bic.w	r2, r3, #6
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	645a      	str	r2, [r3, #68]	; 0x44
 8000e9e:	e002      	b.n	8000ea6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000eae:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <HAL_ADC_Start_DMA+0x194>)
 8000eb0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb6:	4a2f      	ldr	r2, [pc, #188]	; (8000f74 <HAL_ADC_Start_DMA+0x198>)
 8000eb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ebe:	4a2e      	ldr	r2, [pc, #184]	; (8000f78 <HAL_ADC_Start_DMA+0x19c>)
 8000ec0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ec6:	4a2d      	ldr	r2, [pc, #180]	; (8000f7c <HAL_ADC_Start_DMA+0x1a0>)
 8000ec8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000ed2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000ee2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ef2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	334c      	adds	r3, #76	; 0x4c
 8000efe:	4619      	mov	r1, r3
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f000 fccc 	bl	80018a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 031f 	and.w	r3, r3, #31
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10f      	bne.n	8000f34 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d11c      	bne.n	8000f5c <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	e013      	b.n	8000f5c <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a11      	ldr	r2, [pc, #68]	; (8000f80 <HAL_ADC_Start_DMA+0x1a4>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d10e      	bne.n	8000f5c <HAL_ADC_Start_DMA+0x180>
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d107      	bne.n	8000f5c <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f5a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	431bde83 	.word	0x431bde83
 8000f70:	40012300 	.word	0x40012300
 8000f74:	0800141d 	.word	0x0800141d
 8000f78:	080014d7 	.word	0x080014d7
 8000f7c:	080014f3 	.word	0x080014f3
 8000f80:	40012000 	.word	0x40012000

08000f84 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d101      	bne.n	8000fdc <HAL_ADC_ConfigChannel+0x1c>
 8000fd8:	2302      	movs	r3, #2
 8000fda:	e113      	b.n	8001204 <HAL_ADC_ConfigChannel+0x244>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b09      	cmp	r3, #9
 8000fea:	d925      	bls.n	8001038 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68d9      	ldr	r1, [r3, #12]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4413      	add	r3, r2
 8001000:	3b1e      	subs	r3, #30
 8001002:	2207      	movs	r2, #7
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43da      	mvns	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	400a      	ands	r2, r1
 8001010:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68d9      	ldr	r1, [r3, #12]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	b29b      	uxth	r3, r3
 8001022:	4618      	mov	r0, r3
 8001024:	4603      	mov	r3, r0
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4403      	add	r3, r0
 800102a:	3b1e      	subs	r3, #30
 800102c:	409a      	lsls	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	430a      	orrs	r2, r1
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	e022      	b.n	800107e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6919      	ldr	r1, [r3, #16]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	b29b      	uxth	r3, r3
 8001044:	461a      	mov	r2, r3
 8001046:	4613      	mov	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4413      	add	r3, r2
 800104c:	2207      	movs	r2, #7
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	400a      	ands	r2, r1
 800105a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6919      	ldr	r1, [r3, #16]
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	b29b      	uxth	r3, r3
 800106c:	4618      	mov	r0, r3
 800106e:	4603      	mov	r3, r0
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4403      	add	r3, r0
 8001074:	409a      	lsls	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	430a      	orrs	r2, r1
 800107c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b06      	cmp	r3, #6
 8001084:	d824      	bhi.n	80010d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	3b05      	subs	r3, #5
 8001098:	221f      	movs	r2, #31
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43da      	mvns	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	400a      	ands	r2, r1
 80010a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	3b05      	subs	r3, #5
 80010c2:	fa00 f203 	lsl.w	r2, r0, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	430a      	orrs	r2, r1
 80010cc:	635a      	str	r2, [r3, #52]	; 0x34
 80010ce:	e04c      	b.n	800116a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b0c      	cmp	r3, #12
 80010d6:	d824      	bhi.n	8001122 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	3b23      	subs	r3, #35	; 0x23
 80010ea:	221f      	movs	r2, #31
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43da      	mvns	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	400a      	ands	r2, r1
 80010f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	b29b      	uxth	r3, r3
 8001106:	4618      	mov	r0, r3
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	3b23      	subs	r3, #35	; 0x23
 8001114:	fa00 f203 	lsl.w	r2, r0, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	631a      	str	r2, [r3, #48]	; 0x30
 8001120:	e023      	b.n	800116a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	3b41      	subs	r3, #65	; 0x41
 8001134:	221f      	movs	r2, #31
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	400a      	ands	r2, r1
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	b29b      	uxth	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	3b41      	subs	r3, #65	; 0x41
 800115e:	fa00 f203 	lsl.w	r2, r0, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	430a      	orrs	r2, r1
 8001168:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800116a:	4b29      	ldr	r3, [pc, #164]	; (8001210 <HAL_ADC_ConfigChannel+0x250>)
 800116c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a28      	ldr	r2, [pc, #160]	; (8001214 <HAL_ADC_ConfigChannel+0x254>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d10f      	bne.n	8001198 <HAL_ADC_ConfigChannel+0x1d8>
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b12      	cmp	r3, #18
 800117e:	d10b      	bne.n	8001198 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <HAL_ADC_ConfigChannel+0x254>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d12b      	bne.n	80011fa <HAL_ADC_ConfigChannel+0x23a>
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a1c      	ldr	r2, [pc, #112]	; (8001218 <HAL_ADC_ConfigChannel+0x258>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d003      	beq.n	80011b4 <HAL_ADC_ConfigChannel+0x1f4>
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b11      	cmp	r3, #17
 80011b2:	d122      	bne.n	80011fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a11      	ldr	r2, [pc, #68]	; (8001218 <HAL_ADC_ConfigChannel+0x258>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d111      	bne.n	80011fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <HAL_ADC_ConfigChannel+0x25c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a11      	ldr	r2, [pc, #68]	; (8001220 <HAL_ADC_ConfigChannel+0x260>)
 80011dc:	fba2 2303 	umull	r2, r3, r2, r3
 80011e0:	0c9a      	lsrs	r2, r3, #18
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011ec:	e002      	b.n	80011f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f9      	bne.n	80011ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	40012300 	.word	0x40012300
 8001214:	40012000 	.word	0x40012000
 8001218:	10000012 	.word	0x10000012
 800121c:	20000000 	.word	0x20000000
 8001220:	431bde83 	.word	0x431bde83

08001224 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800122c:	4b79      	ldr	r3, [pc, #484]	; (8001414 <ADC_Init+0x1f0>)
 800122e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	431a      	orrs	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001258:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6859      	ldr	r1, [r3, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	021a      	lsls	r2, r3, #8
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800127c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6859      	ldr	r1, [r3, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	430a      	orrs	r2, r1
 800128e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800129e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6899      	ldr	r1, [r3, #8]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68da      	ldr	r2, [r3, #12]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b6:	4a58      	ldr	r2, [pc, #352]	; (8001418 <ADC_Init+0x1f4>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d022      	beq.n	8001302 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6899      	ldr	r1, [r3, #8]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6899      	ldr	r1, [r3, #8]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	e00f      	b.n	8001322 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001310:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001320:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0202 	bic.w	r2, r2, #2
 8001330:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6899      	ldr	r1, [r3, #8]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	7e1b      	ldrb	r3, [r3, #24]
 800133c:	005a      	lsls	r2, r3, #1
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	430a      	orrs	r2, r1
 8001344:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 3020 	ldrb.w	r3, [r3, #32]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d01b      	beq.n	8001388 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800135e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800136e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6859      	ldr	r1, [r3, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137a:	3b01      	subs	r3, #1
 800137c:	035a      	lsls	r2, r3, #13
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	e007      	b.n	8001398 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001396:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80013a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	051a      	lsls	r2, r3, #20
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6899      	ldr	r1, [r3, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013da:	025a      	lsls	r2, r3, #9
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6899      	ldr	r1, [r3, #8]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	029a      	lsls	r2, r3, #10
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	430a      	orrs	r2, r1
 8001406:	609a      	str	r2, [r3, #8]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	40012300 	.word	0x40012300
 8001418:	0f000001 	.word	0x0f000001

0800141c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001428:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001432:	2b00      	cmp	r3, #0
 8001434:	d13c      	bne.n	80014b0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d12b      	bne.n	80014a8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001454:	2b00      	cmp	r3, #0
 8001456:	d127      	bne.n	80014a8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001462:	2b00      	cmp	r3, #0
 8001464:	d006      	beq.n	8001474 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001470:	2b00      	cmp	r3, #0
 8001472:	d119      	bne.n	80014a8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0220 	bic.w	r2, r2, #32
 8001482:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d105      	bne.n	80014a8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f043 0201 	orr.w	r2, r3, #1
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f7ff fd6b 	bl	8000f84 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80014ae:	e00e      	b.n	80014ce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f003 0310 	and.w	r3, r3, #16
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f7ff fd75 	bl	8000fac <HAL_ADC_ErrorCallback>
}
 80014c2:	e004      	b.n	80014ce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	4798      	blx	r3
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b084      	sub	sp, #16
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f7ff fd57 	bl	8000f98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2240      	movs	r2, #64	; 0x40
 8001504:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f043 0204 	orr.w	r2, r3, #4
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f7ff fd4a 	bl	8000fac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001518:	bf00      	nop
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800153c:	4013      	ands	r3, r2
 800153e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800154c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001552:	4a04      	ldr	r2, [pc, #16]	; (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	60d3      	str	r3, [r2, #12]
}
 8001558:	bf00      	nop
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <__NVIC_GetPriorityGrouping+0x18>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f003 0307 	and.w	r3, r3, #7
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	2b00      	cmp	r3, #0
 8001594:	db0b      	blt.n	80015ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	f003 021f 	and.w	r2, r3, #31
 800159c:	4907      	ldr	r1, [pc, #28]	; (80015bc <__NVIC_EnableIRQ+0x38>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	095b      	lsrs	r3, r3, #5
 80015a4:	2001      	movs	r0, #1
 80015a6:	fa00 f202 	lsl.w	r2, r0, r2
 80015aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000e100 	.word	0xe000e100

080015c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db0a      	blt.n	80015ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	490c      	ldr	r1, [pc, #48]	; (800160c <__NVIC_SetPriority+0x4c>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	0112      	lsls	r2, r2, #4
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	440b      	add	r3, r1
 80015e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e8:	e00a      	b.n	8001600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4908      	ldr	r1, [pc, #32]	; (8001610 <__NVIC_SetPriority+0x50>)
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	3b04      	subs	r3, #4
 80015f8:	0112      	lsls	r2, r2, #4
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	440b      	add	r3, r1
 80015fe:	761a      	strb	r2, [r3, #24]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000e100 	.word	0xe000e100
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	; 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f1c3 0307 	rsb	r3, r3, #7
 800162e:	2b04      	cmp	r3, #4
 8001630:	bf28      	it	cs
 8001632:	2304      	movcs	r3, #4
 8001634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3304      	adds	r3, #4
 800163a:	2b06      	cmp	r3, #6
 800163c:	d902      	bls.n	8001644 <NVIC_EncodePriority+0x30>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3b03      	subs	r3, #3
 8001642:	e000      	b.n	8001646 <NVIC_EncodePriority+0x32>
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	401a      	ands	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800165c:	f04f 31ff 	mov.w	r1, #4294967295
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	43d9      	mvns	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	4313      	orrs	r3, r2
         );
}
 800166e:	4618      	mov	r0, r3
 8001670:	3724      	adds	r7, #36	; 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800168c:	d301      	bcc.n	8001692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168e:	2301      	movs	r3, #1
 8001690:	e00f      	b.n	80016b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <SysTick_Config+0x40>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169a:	210f      	movs	r1, #15
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f7ff ff8e 	bl	80015c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <SysTick_Config+0x40>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016aa:	4b04      	ldr	r3, [pc, #16]	; (80016bc <SysTick_Config+0x40>)
 80016ac:	2207      	movs	r2, #7
 80016ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	e000e010 	.word	0xe000e010

080016c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff29 	bl	8001520 <__NVIC_SetPriorityGrouping>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e8:	f7ff ff3e 	bl	8001568 <__NVIC_GetPriorityGrouping>
 80016ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	f7ff ff8e 	bl	8001614 <NVIC_EncodePriority>
 80016f8:	4602      	mov	r2, r0
 80016fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff5d 	bl	80015c0 <__NVIC_SetPriority>
}
 8001706:	bf00      	nop
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff31 	bl	8001584 <__NVIC_EnableIRQ>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ffa2 	bl	800167c <SysTick_Config>
 8001738:	4603      	mov	r3, r0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001750:	f7ff faf4 	bl	8000d3c <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e099      	b.n	8001894 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2202      	movs	r2, #2
 800176c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001780:	e00f      	b.n	80017a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001782:	f7ff fadb 	bl	8000d3c <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b05      	cmp	r3, #5
 800178e:	d908      	bls.n	80017a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2220      	movs	r2, #32
 8001794:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2203      	movs	r2, #3
 800179a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e078      	b.n	8001894 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1e8      	bne.n	8001782 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	4b38      	ldr	r3, [pc, #224]	; (800189c <HAL_DMA_Init+0x158>)
 80017bc:	4013      	ands	r3, r2
 80017be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d107      	bne.n	800180c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	4313      	orrs	r3, r2
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	4313      	orrs	r3, r2
 800180a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f023 0307 	bic.w	r3, r3, #7
 8001822:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	4313      	orrs	r3, r2
 800182c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	2b04      	cmp	r3, #4
 8001834:	d117      	bne.n	8001866 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	4313      	orrs	r3, r2
 800183e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00e      	beq.n	8001866 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 fa6f 	bl	8001d2c <DMA_CheckFifoParam>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d008      	beq.n	8001866 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2240      	movs	r2, #64	; 0x40
 8001858:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001862:	2301      	movs	r3, #1
 8001864:	e016      	b.n	8001894 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 fa26 	bl	8001cc0 <DMA_CalcBaseAndBitshift>
 8001874:	4603      	mov	r3, r0
 8001876:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187c:	223f      	movs	r2, #63	; 0x3f
 800187e:	409a      	lsls	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	f010803f 	.word	0xf010803f

080018a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d101      	bne.n	80018c6 <HAL_DMA_Start_IT+0x26>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e040      	b.n	8001948 <HAL_DMA_Start_IT+0xa8>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d12f      	bne.n	800193a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2202      	movs	r2, #2
 80018de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	68b9      	ldr	r1, [r7, #8]
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 f9b8 	bl	8001c64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f8:	223f      	movs	r2, #63	; 0x3f
 80018fa:	409a      	lsls	r2, r3
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0216 	orr.w	r2, r2, #22
 800190e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	2b00      	cmp	r3, #0
 8001916:	d007      	beq.n	8001928 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0208 	orr.w	r2, r2, #8
 8001926:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0201 	orr.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	e005      	b.n	8001946 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001942:	2302      	movs	r3, #2
 8001944:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001946:	7dfb      	ldrb	r3, [r7, #23]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800195c:	4b92      	ldr	r3, [pc, #584]	; (8001ba8 <HAL_DMA_IRQHandler+0x258>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a92      	ldr	r2, [pc, #584]	; (8001bac <HAL_DMA_IRQHandler+0x25c>)
 8001962:	fba2 2303 	umull	r2, r3, r2, r3
 8001966:	0a9b      	lsrs	r3, r3, #10
 8001968:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197a:	2208      	movs	r2, #8
 800197c:	409a      	lsls	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4013      	ands	r3, r2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d01a      	beq.n	80019bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d013      	beq.n	80019bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0204 	bic.w	r2, r2, #4
 80019a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	2208      	movs	r2, #8
 80019aa:	409a      	lsls	r2, r3
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b4:	f043 0201 	orr.w	r2, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c0:	2201      	movs	r2, #1
 80019c2:	409a      	lsls	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d012      	beq.n	80019f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019de:	2201      	movs	r2, #1
 80019e0:	409a      	lsls	r2, r3
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ea:	f043 0202 	orr.w	r2, r3, #2
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f6:	2204      	movs	r2, #4
 80019f8:	409a      	lsls	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d012      	beq.n	8001a28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00b      	beq.n	8001a28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a14:	2204      	movs	r2, #4
 8001a16:	409a      	lsls	r2, r3
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a20:	f043 0204 	orr.w	r2, r3, #4
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2c:	2210      	movs	r2, #16
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d043      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d03c      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4a:	2210      	movs	r2, #16
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d018      	beq.n	8001a92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d108      	bne.n	8001a80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d024      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	4798      	blx	r3
 8001a7e:	e01f      	b.n	8001ac0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d01b      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	4798      	blx	r3
 8001a90:	e016      	b.n	8001ac0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d107      	bne.n	8001ab0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0208 	bic.w	r2, r2, #8
 8001aae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 808e 	beq.w	8001bee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 8086 	beq.w	8001bee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b05      	cmp	r3, #5
 8001af8:	d136      	bne.n	8001b68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0216 	bic.w	r2, r2, #22
 8001b08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	695a      	ldr	r2, [r3, #20]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d103      	bne.n	8001b2a <HAL_DMA_IRQHandler+0x1da>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d007      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0208 	bic.w	r2, r2, #8
 8001b38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3e:	223f      	movs	r2, #63	; 0x3f
 8001b40:	409a      	lsls	r2, r3
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d07d      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	4798      	blx	r3
        }
        return;
 8001b66:	e078      	b.n	8001c5a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d01c      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d108      	bne.n	8001b96 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d030      	beq.n	8001bee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	4798      	blx	r3
 8001b94:	e02b      	b.n	8001bee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d027      	beq.n	8001bee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	4798      	blx	r3
 8001ba6:	e022      	b.n	8001bee <HAL_DMA_IRQHandler+0x29e>
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10f      	bne.n	8001bde <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0210 	bic.w	r2, r2, #16
 8001bcc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d032      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d022      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2205      	movs	r2, #5
 8001c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0201 	bic.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d307      	bcc.n	8001c36 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1f2      	bne.n	8001c1a <HAL_DMA_IRQHandler+0x2ca>
 8001c34:	e000      	b.n	8001c38 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001c36:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	4798      	blx	r3
 8001c58:	e000      	b.n	8001c5c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001c5a:	bf00      	nop
    }
  }
}
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop

08001c64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b40      	cmp	r3, #64	; 0x40
 8001c90:	d108      	bne.n	8001ca4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ca2:	e007      	b.n	8001cb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	60da      	str	r2, [r3, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	3b10      	subs	r3, #16
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <DMA_CalcBaseAndBitshift+0x64>)
 8001cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd6:	091b      	lsrs	r3, r3, #4
 8001cd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cda:	4a13      	ldr	r2, [pc, #76]	; (8001d28 <DMA_CalcBaseAndBitshift+0x68>)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4413      	add	r3, r2
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d909      	bls.n	8001d02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cf6:	f023 0303 	bic.w	r3, r3, #3
 8001cfa:	1d1a      	adds	r2, r3, #4
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	659a      	str	r2, [r3, #88]	; 0x58
 8001d00:	e007      	b.n	8001d12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d0a:	f023 0303 	bic.w	r3, r3, #3
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	aaaaaaab 	.word	0xaaaaaaab
 8001d28:	080032f4 	.word	0x080032f4

08001d2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d11f      	bne.n	8001d86 <DMA_CheckFifoParam+0x5a>
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d856      	bhi.n	8001dfa <DMA_CheckFifoParam+0xce>
 8001d4c:	a201      	add	r2, pc, #4	; (adr r2, 8001d54 <DMA_CheckFifoParam+0x28>)
 8001d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d52:	bf00      	nop
 8001d54:	08001d65 	.word	0x08001d65
 8001d58:	08001d77 	.word	0x08001d77
 8001d5c:	08001d65 	.word	0x08001d65
 8001d60:	08001dfb 	.word	0x08001dfb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d046      	beq.n	8001dfe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d74:	e043      	b.n	8001dfe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d7e:	d140      	bne.n	8001e02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d84:	e03d      	b.n	8001e02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d8e:	d121      	bne.n	8001dd4 <DMA_CheckFifoParam+0xa8>
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d837      	bhi.n	8001e06 <DMA_CheckFifoParam+0xda>
 8001d96:	a201      	add	r2, pc, #4	; (adr r2, 8001d9c <DMA_CheckFifoParam+0x70>)
 8001d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9c:	08001dad 	.word	0x08001dad
 8001da0:	08001db3 	.word	0x08001db3
 8001da4:	08001dad 	.word	0x08001dad
 8001da8:	08001dc5 	.word	0x08001dc5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
      break;
 8001db0:	e030      	b.n	8001e14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d025      	beq.n	8001e0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dc2:	e022      	b.n	8001e0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dcc:	d11f      	bne.n	8001e0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001dd2:	e01c      	b.n	8001e0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d903      	bls.n	8001de2 <DMA_CheckFifoParam+0xb6>
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d003      	beq.n	8001de8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001de0:	e018      	b.n	8001e14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
      break;
 8001de6:	e015      	b.n	8001e14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00e      	beq.n	8001e12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
      break;
 8001df8:	e00b      	b.n	8001e12 <DMA_CheckFifoParam+0xe6>
      break;
 8001dfa:	bf00      	nop
 8001dfc:	e00a      	b.n	8001e14 <DMA_CheckFifoParam+0xe8>
      break;
 8001dfe:	bf00      	nop
 8001e00:	e008      	b.n	8001e14 <DMA_CheckFifoParam+0xe8>
      break;
 8001e02:	bf00      	nop
 8001e04:	e006      	b.n	8001e14 <DMA_CheckFifoParam+0xe8>
      break;
 8001e06:	bf00      	nop
 8001e08:	e004      	b.n	8001e14 <DMA_CheckFifoParam+0xe8>
      break;
 8001e0a:	bf00      	nop
 8001e0c:	e002      	b.n	8001e14 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e0e:	bf00      	nop
 8001e10:	e000      	b.n	8001e14 <DMA_CheckFifoParam+0xe8>
      break;
 8001e12:	bf00      	nop
    }
  } 
  
  return status; 
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop

08001e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	; 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	e159      	b.n	80020f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e40:	2201      	movs	r2, #1
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	f040 8148 	bne.w	80020ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d00b      	beq.n	8001e7e <HAL_GPIO_Init+0x5a>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d007      	beq.n	8001e7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e72:	2b11      	cmp	r3, #17
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b12      	cmp	r3, #18
 8001e7c:	d130      	bne.n	8001ee0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	2203      	movs	r2, #3
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 0201 	and.w	r2, r3, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0xfc>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b12      	cmp	r3, #18
 8001f1e:	d123      	bne.n	8001f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	08da      	lsrs	r2, r3, #3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3208      	adds	r2, #8
 8001f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	220f      	movs	r2, #15
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	08da      	lsrs	r2, r3, #3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3208      	adds	r2, #8
 8001f62:	69b9      	ldr	r1, [r7, #24]
 8001f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	2203      	movs	r2, #3
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0203 	and.w	r2, r3, #3
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80a2 	beq.w	80020ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	4b57      	ldr	r3, [pc, #348]	; (800210c <HAL_GPIO_Init+0x2e8>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	4a56      	ldr	r2, [pc, #344]	; (800210c <HAL_GPIO_Init+0x2e8>)
 8001fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fba:	4b54      	ldr	r3, [pc, #336]	; (800210c <HAL_GPIO_Init+0x2e8>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fc6:	4a52      	ldr	r2, [pc, #328]	; (8002110 <HAL_GPIO_Init+0x2ec>)
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	089b      	lsrs	r3, r3, #2
 8001fcc:	3302      	adds	r3, #2
 8001fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	220f      	movs	r2, #15
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a49      	ldr	r2, [pc, #292]	; (8002114 <HAL_GPIO_Init+0x2f0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d019      	beq.n	8002026 <HAL_GPIO_Init+0x202>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a48      	ldr	r2, [pc, #288]	; (8002118 <HAL_GPIO_Init+0x2f4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d013      	beq.n	8002022 <HAL_GPIO_Init+0x1fe>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a47      	ldr	r2, [pc, #284]	; (800211c <HAL_GPIO_Init+0x2f8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00d      	beq.n	800201e <HAL_GPIO_Init+0x1fa>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a46      	ldr	r2, [pc, #280]	; (8002120 <HAL_GPIO_Init+0x2fc>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d007      	beq.n	800201a <HAL_GPIO_Init+0x1f6>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a45      	ldr	r2, [pc, #276]	; (8002124 <HAL_GPIO_Init+0x300>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d101      	bne.n	8002016 <HAL_GPIO_Init+0x1f2>
 8002012:	2304      	movs	r3, #4
 8002014:	e008      	b.n	8002028 <HAL_GPIO_Init+0x204>
 8002016:	2307      	movs	r3, #7
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x204>
 800201a:	2303      	movs	r3, #3
 800201c:	e004      	b.n	8002028 <HAL_GPIO_Init+0x204>
 800201e:	2302      	movs	r3, #2
 8002020:	e002      	b.n	8002028 <HAL_GPIO_Init+0x204>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <HAL_GPIO_Init+0x204>
 8002026:	2300      	movs	r3, #0
 8002028:	69fa      	ldr	r2, [r7, #28]
 800202a:	f002 0203 	and.w	r2, r2, #3
 800202e:	0092      	lsls	r2, r2, #2
 8002030:	4093      	lsls	r3, r2
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002038:	4935      	ldr	r1, [pc, #212]	; (8002110 <HAL_GPIO_Init+0x2ec>)
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	089b      	lsrs	r3, r3, #2
 800203e:	3302      	adds	r3, #2
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002046:	4b38      	ldr	r3, [pc, #224]	; (8002128 <HAL_GPIO_Init+0x304>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800206a:	4a2f      	ldr	r2, [pc, #188]	; (8002128 <HAL_GPIO_Init+0x304>)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002070:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <HAL_GPIO_Init+0x304>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002094:	4a24      	ldr	r2, [pc, #144]	; (8002128 <HAL_GPIO_Init+0x304>)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800209a:	4b23      	ldr	r3, [pc, #140]	; (8002128 <HAL_GPIO_Init+0x304>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020be:	4a1a      	ldr	r2, [pc, #104]	; (8002128 <HAL_GPIO_Init+0x304>)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020c4:	4b18      	ldr	r3, [pc, #96]	; (8002128 <HAL_GPIO_Init+0x304>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020e8:	4a0f      	ldr	r2, [pc, #60]	; (8002128 <HAL_GPIO_Init+0x304>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3301      	adds	r3, #1
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	2b0f      	cmp	r3, #15
 80020f8:	f67f aea2 	bls.w	8001e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
 8002100:	3724      	adds	r7, #36	; 0x24
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40023800 	.word	0x40023800
 8002110:	40013800 	.word	0x40013800
 8002114:	40020000 	.word	0x40020000
 8002118:	40020400 	.word	0x40020400
 800211c:	40020800 	.word	0x40020800
 8002120:	40020c00 	.word	0x40020c00
 8002124:	40021000 	.word	0x40021000
 8002128:	40013c00 	.word	0x40013c00

0800212c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	887b      	ldrh	r3, [r7, #2]
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	e001      	b.n	800214e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	807b      	strh	r3, [r7, #2]
 8002168:	4613      	mov	r3, r2
 800216a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800216c:	787b      	ldrb	r3, [r7, #1]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002178:	e003      	b.n	8002182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800217a:	887b      	ldrh	r3, [r7, #2]
 800217c:	041a      	lsls	r2, r3, #16
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	619a      	str	r2, [r3, #24]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800219c:	695a      	ldr	r2, [r3, #20]
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d006      	beq.n	80021b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021a6:	4a05      	ldr	r2, [pc, #20]	; (80021bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fb60 	bl	8000874 <HAL_GPIO_EXTI_Callback>
  }
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40013c00 	.word	0x40013c00

080021c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e25b      	b.n	800268a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d075      	beq.n	80022ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021de:	4ba3      	ldr	r3, [pc, #652]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d00c      	beq.n	8002204 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ea:	4ba0      	ldr	r3, [pc, #640]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d112      	bne.n	800221c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021f6:	4b9d      	ldr	r3, [pc, #628]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002202:	d10b      	bne.n	800221c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002204:	4b99      	ldr	r3, [pc, #612]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d05b      	beq.n	80022c8 <HAL_RCC_OscConfig+0x108>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d157      	bne.n	80022c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e236      	b.n	800268a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002224:	d106      	bne.n	8002234 <HAL_RCC_OscConfig+0x74>
 8002226:	4b91      	ldr	r3, [pc, #580]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a90      	ldr	r2, [pc, #576]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 800222c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e01d      	b.n	8002270 <HAL_RCC_OscConfig+0xb0>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0x98>
 800223e:	4b8b      	ldr	r3, [pc, #556]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a8a      	ldr	r2, [pc, #552]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 8002244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	4b88      	ldr	r3, [pc, #544]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a87      	ldr	r2, [pc, #540]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 8002250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e00b      	b.n	8002270 <HAL_RCC_OscConfig+0xb0>
 8002258:	4b84      	ldr	r3, [pc, #528]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a83      	ldr	r2, [pc, #524]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 800225e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	4b81      	ldr	r3, [pc, #516]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a80      	ldr	r2, [pc, #512]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 800226a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800226e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d013      	beq.n	80022a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7fe fd60 	bl	8000d3c <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002280:	f7fe fd5c 	bl	8000d3c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	; 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e1fb      	b.n	800268a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	4b76      	ldr	r3, [pc, #472]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0xc0>
 800229e:	e014      	b.n	80022ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7fe fd4c 	bl	8000d3c <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a8:	f7fe fd48 	bl	8000d3c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	; 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e1e7      	b.n	800268a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ba:	4b6c      	ldr	r3, [pc, #432]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0xe8>
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d063      	beq.n	800239e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022d6:	4b65      	ldr	r3, [pc, #404]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00b      	beq.n	80022fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022e2:	4b62      	ldr	r3, [pc, #392]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d11c      	bne.n	8002328 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ee:	4b5f      	ldr	r3, [pc, #380]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d116      	bne.n	8002328 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fa:	4b5c      	ldr	r3, [pc, #368]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_RCC_OscConfig+0x152>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d001      	beq.n	8002312 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e1bb      	b.n	800268a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002312:	4b56      	ldr	r3, [pc, #344]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4952      	ldr	r1, [pc, #328]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002326:	e03a      	b.n	800239e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002330:	4b4f      	ldr	r3, [pc, #316]	; (8002470 <HAL_RCC_OscConfig+0x2b0>)
 8002332:	2201      	movs	r2, #1
 8002334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7fe fd01 	bl	8000d3c <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233e:	f7fe fcfd 	bl	8000d3c <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e19c      	b.n	800268a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002350:	4b46      	ldr	r3, [pc, #280]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235c:	4b43      	ldr	r3, [pc, #268]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4940      	ldr	r1, [pc, #256]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 800236c:	4313      	orrs	r3, r2
 800236e:	600b      	str	r3, [r1, #0]
 8002370:	e015      	b.n	800239e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002372:	4b3f      	ldr	r3, [pc, #252]	; (8002470 <HAL_RCC_OscConfig+0x2b0>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7fe fce0 	bl	8000d3c <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002380:	f7fe fcdc 	bl	8000d3c <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e17b      	b.n	800268a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002392:	4b36      	ldr	r3, [pc, #216]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d030      	beq.n	800240c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d016      	beq.n	80023e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b2:	4b30      	ldr	r3, [pc, #192]	; (8002474 <HAL_RCC_OscConfig+0x2b4>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b8:	f7fe fcc0 	bl	8000d3c <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c0:	f7fe fcbc 	bl	8000d3c <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e15b      	b.n	800268a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d2:	4b26      	ldr	r3, [pc, #152]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x200>
 80023de:	e015      	b.n	800240c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e0:	4b24      	ldr	r3, [pc, #144]	; (8002474 <HAL_RCC_OscConfig+0x2b4>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e6:	f7fe fca9 	bl	8000d3c <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ee:	f7fe fca5 	bl	8000d3c <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e144      	b.n	800268a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002400:	4b1a      	ldr	r3, [pc, #104]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 8002402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f0      	bne.n	80023ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80a0 	beq.w	800255a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800241a:	2300      	movs	r3, #0
 800241c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800241e:	4b13      	ldr	r3, [pc, #76]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10f      	bne.n	800244a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	4b0f      	ldr	r3, [pc, #60]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	4a0e      	ldr	r2, [pc, #56]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 8002434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002438:	6413      	str	r3, [r2, #64]	; 0x40
 800243a:	4b0c      	ldr	r3, [pc, #48]	; (800246c <HAL_RCC_OscConfig+0x2ac>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002446:	2301      	movs	r3, #1
 8002448:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_RCC_OscConfig+0x2b8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002452:	2b00      	cmp	r3, #0
 8002454:	d121      	bne.n	800249a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <HAL_RCC_OscConfig+0x2b8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a07      	ldr	r2, [pc, #28]	; (8002478 <HAL_RCC_OscConfig+0x2b8>)
 800245c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002462:	f7fe fc6b 	bl	8000d3c <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002468:	e011      	b.n	800248e <HAL_RCC_OscConfig+0x2ce>
 800246a:	bf00      	nop
 800246c:	40023800 	.word	0x40023800
 8002470:	42470000 	.word	0x42470000
 8002474:	42470e80 	.word	0x42470e80
 8002478:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800247c:	f7fe fc5e 	bl	8000d3c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e0fd      	b.n	800268a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248e:	4b81      	ldr	r3, [pc, #516]	; (8002694 <HAL_RCC_OscConfig+0x4d4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d106      	bne.n	80024b0 <HAL_RCC_OscConfig+0x2f0>
 80024a2:	4b7d      	ldr	r3, [pc, #500]	; (8002698 <HAL_RCC_OscConfig+0x4d8>)
 80024a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a6:	4a7c      	ldr	r2, [pc, #496]	; (8002698 <HAL_RCC_OscConfig+0x4d8>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6713      	str	r3, [r2, #112]	; 0x70
 80024ae:	e01c      	b.n	80024ea <HAL_RCC_OscConfig+0x32a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b05      	cmp	r3, #5
 80024b6:	d10c      	bne.n	80024d2 <HAL_RCC_OscConfig+0x312>
 80024b8:	4b77      	ldr	r3, [pc, #476]	; (8002698 <HAL_RCC_OscConfig+0x4d8>)
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	4a76      	ldr	r2, [pc, #472]	; (8002698 <HAL_RCC_OscConfig+0x4d8>)
 80024be:	f043 0304 	orr.w	r3, r3, #4
 80024c2:	6713      	str	r3, [r2, #112]	; 0x70
 80024c4:	4b74      	ldr	r3, [pc, #464]	; (8002698 <HAL_RCC_OscConfig+0x4d8>)
 80024c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c8:	4a73      	ldr	r2, [pc, #460]	; (8002698 <HAL_RCC_OscConfig+0x4d8>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6713      	str	r3, [r2, #112]	; 0x70
 80024d0:	e00b      	b.n	80024ea <HAL_RCC_OscConfig+0x32a>
 80024d2:	4b71      	ldr	r3, [pc, #452]	; (8002698 <HAL_RCC_OscConfig+0x4d8>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d6:	4a70      	ldr	r2, [pc, #448]	; (8002698 <HAL_RCC_OscConfig+0x4d8>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6713      	str	r3, [r2, #112]	; 0x70
 80024de:	4b6e      	ldr	r3, [pc, #440]	; (8002698 <HAL_RCC_OscConfig+0x4d8>)
 80024e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e2:	4a6d      	ldr	r2, [pc, #436]	; (8002698 <HAL_RCC_OscConfig+0x4d8>)
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d015      	beq.n	800251e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f2:	f7fe fc23 	bl	8000d3c <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f8:	e00a      	b.n	8002510 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024fa:	f7fe fc1f 	bl	8000d3c <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f241 3288 	movw	r2, #5000	; 0x1388
 8002508:	4293      	cmp	r3, r2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e0bc      	b.n	800268a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002510:	4b61      	ldr	r3, [pc, #388]	; (8002698 <HAL_RCC_OscConfig+0x4d8>)
 8002512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0ee      	beq.n	80024fa <HAL_RCC_OscConfig+0x33a>
 800251c:	e014      	b.n	8002548 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251e:	f7fe fc0d 	bl	8000d3c <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002524:	e00a      	b.n	800253c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002526:	f7fe fc09 	bl	8000d3c <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f241 3288 	movw	r2, #5000	; 0x1388
 8002534:	4293      	cmp	r3, r2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e0a6      	b.n	800268a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253c:	4b56      	ldr	r3, [pc, #344]	; (8002698 <HAL_RCC_OscConfig+0x4d8>)
 800253e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1ee      	bne.n	8002526 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d105      	bne.n	800255a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254e:	4b52      	ldr	r3, [pc, #328]	; (8002698 <HAL_RCC_OscConfig+0x4d8>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	4a51      	ldr	r2, [pc, #324]	; (8002698 <HAL_RCC_OscConfig+0x4d8>)
 8002554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002558:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8092 	beq.w	8002688 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002564:	4b4c      	ldr	r3, [pc, #304]	; (8002698 <HAL_RCC_OscConfig+0x4d8>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	2b08      	cmp	r3, #8
 800256e:	d05c      	beq.n	800262a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d141      	bne.n	80025fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002578:	4b48      	ldr	r3, [pc, #288]	; (800269c <HAL_RCC_OscConfig+0x4dc>)
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7fe fbdd 	bl	8000d3c <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002586:	f7fe fbd9 	bl	8000d3c <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e078      	b.n	800268a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002598:	4b3f      	ldr	r3, [pc, #252]	; (8002698 <HAL_RCC_OscConfig+0x4d8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f0      	bne.n	8002586 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69da      	ldr	r2, [r3, #28]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	019b      	lsls	r3, r3, #6
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ba:	085b      	lsrs	r3, r3, #1
 80025bc:	3b01      	subs	r3, #1
 80025be:	041b      	lsls	r3, r3, #16
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c6:	061b      	lsls	r3, r3, #24
 80025c8:	4933      	ldr	r1, [pc, #204]	; (8002698 <HAL_RCC_OscConfig+0x4d8>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ce:	4b33      	ldr	r3, [pc, #204]	; (800269c <HAL_RCC_OscConfig+0x4dc>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7fe fbb2 	bl	8000d3c <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025dc:	f7fe fbae 	bl	8000d3c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e04d      	b.n	800268a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ee:	4b2a      	ldr	r3, [pc, #168]	; (8002698 <HAL_RCC_OscConfig+0x4d8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x41c>
 80025fa:	e045      	b.n	8002688 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fc:	4b27      	ldr	r3, [pc, #156]	; (800269c <HAL_RCC_OscConfig+0x4dc>)
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002602:	f7fe fb9b 	bl	8000d3c <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800260a:	f7fe fb97 	bl	8000d3c <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e036      	b.n	800268a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261c:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <HAL_RCC_OscConfig+0x4d8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f0      	bne.n	800260a <HAL_RCC_OscConfig+0x44a>
 8002628:	e02e      	b.n	8002688 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e029      	b.n	800268a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002636:	4b18      	ldr	r3, [pc, #96]	; (8002698 <HAL_RCC_OscConfig+0x4d8>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	429a      	cmp	r2, r3
 8002648:	d11c      	bne.n	8002684 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002654:	429a      	cmp	r2, r3
 8002656:	d115      	bne.n	8002684 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800265e:	4013      	ands	r3, r2
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002664:	4293      	cmp	r3, r2
 8002666:	d10d      	bne.n	8002684 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d106      	bne.n	8002684 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40007000 	.word	0x40007000
 8002698:	40023800 	.word	0x40023800
 800269c:	42470060 	.word	0x42470060

080026a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0cc      	b.n	800284e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026b4:	4b68      	ldr	r3, [pc, #416]	; (8002858 <HAL_RCC_ClockConfig+0x1b8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d90c      	bls.n	80026dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b65      	ldr	r3, [pc, #404]	; (8002858 <HAL_RCC_ClockConfig+0x1b8>)
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ca:	4b63      	ldr	r3, [pc, #396]	; (8002858 <HAL_RCC_ClockConfig+0x1b8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d001      	beq.n	80026dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0b8      	b.n	800284e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d020      	beq.n	800272a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026f4:	4b59      	ldr	r3, [pc, #356]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4a58      	ldr	r2, [pc, #352]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800270c:	4b53      	ldr	r3, [pc, #332]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4a52      	ldr	r2, [pc, #328]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002716:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002718:	4b50      	ldr	r3, [pc, #320]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	494d      	ldr	r1, [pc, #308]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d044      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d107      	bne.n	800274e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	4b47      	ldr	r3, [pc, #284]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d119      	bne.n	800277e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e07f      	b.n	800284e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d003      	beq.n	800275e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800275a:	2b03      	cmp	r3, #3
 800275c:	d107      	bne.n	800276e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275e:	4b3f      	ldr	r3, [pc, #252]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e06f      	b.n	800284e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276e:	4b3b      	ldr	r3, [pc, #236]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e067      	b.n	800284e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800277e:	4b37      	ldr	r3, [pc, #220]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f023 0203 	bic.w	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4934      	ldr	r1, [pc, #208]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 800278c:	4313      	orrs	r3, r2
 800278e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002790:	f7fe fad4 	bl	8000d3c <HAL_GetTick>
 8002794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002796:	e00a      	b.n	80027ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002798:	f7fe fad0 	bl	8000d3c <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e04f      	b.n	800284e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ae:	4b2b      	ldr	r3, [pc, #172]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 020c 	and.w	r2, r3, #12
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	429a      	cmp	r2, r3
 80027be:	d1eb      	bne.n	8002798 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027c0:	4b25      	ldr	r3, [pc, #148]	; (8002858 <HAL_RCC_ClockConfig+0x1b8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d20c      	bcs.n	80027e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b22      	ldr	r3, [pc, #136]	; (8002858 <HAL_RCC_ClockConfig+0x1b8>)
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d6:	4b20      	ldr	r3, [pc, #128]	; (8002858 <HAL_RCC_ClockConfig+0x1b8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d001      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e032      	b.n	800284e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f4:	4b19      	ldr	r3, [pc, #100]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	4916      	ldr	r1, [pc, #88]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	4313      	orrs	r3, r2
 8002804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d009      	beq.n	8002826 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002812:	4b12      	ldr	r3, [pc, #72]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	490e      	ldr	r1, [pc, #56]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	4313      	orrs	r3, r2
 8002824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002826:	f000 f821 	bl	800286c <HAL_RCC_GetSysClockFreq>
 800282a:	4602      	mov	r2, r0
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	091b      	lsrs	r3, r3, #4
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	490a      	ldr	r1, [pc, #40]	; (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	5ccb      	ldrb	r3, [r1, r3]
 800283a:	fa22 f303 	lsr.w	r3, r2, r3
 800283e:	4a09      	ldr	r2, [pc, #36]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002842:	4b09      	ldr	r3, [pc, #36]	; (8002868 <HAL_RCC_ClockConfig+0x1c8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe fa34 	bl	8000cb4 <HAL_InitTick>

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40023c00 	.word	0x40023c00
 800285c:	40023800 	.word	0x40023800
 8002860:	080032dc 	.word	0x080032dc
 8002864:	20000000 	.word	0x20000000
 8002868:	20000004 	.word	0x20000004

0800286c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800286c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002870:	b084      	sub	sp, #16
 8002872:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	2300      	movs	r3, #0
 800287e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002884:	4b67      	ldr	r3, [pc, #412]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 030c 	and.w	r3, r3, #12
 800288c:	2b08      	cmp	r3, #8
 800288e:	d00d      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x40>
 8002890:	2b08      	cmp	r3, #8
 8002892:	f200 80bd 	bhi.w	8002a10 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <HAL_RCC_GetSysClockFreq+0x34>
 800289a:	2b04      	cmp	r3, #4
 800289c:	d003      	beq.n	80028a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800289e:	e0b7      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028a0:	4b61      	ldr	r3, [pc, #388]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80028a2:	60bb      	str	r3, [r7, #8]
       break;
 80028a4:	e0b7      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028a6:	4b61      	ldr	r3, [pc, #388]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80028a8:	60bb      	str	r3, [r7, #8]
      break;
 80028aa:	e0b4      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028ac:	4b5d      	ldr	r3, [pc, #372]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028b6:	4b5b      	ldr	r3, [pc, #364]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d04d      	beq.n	800295e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c2:	4b58      	ldr	r3, [pc, #352]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	099b      	lsrs	r3, r3, #6
 80028c8:	461a      	mov	r2, r3
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028d2:	f04f 0100 	mov.w	r1, #0
 80028d6:	ea02 0800 	and.w	r8, r2, r0
 80028da:	ea03 0901 	and.w	r9, r3, r1
 80028de:	4640      	mov	r0, r8
 80028e0:	4649      	mov	r1, r9
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	014b      	lsls	r3, r1, #5
 80028ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028f0:	0142      	lsls	r2, r0, #5
 80028f2:	4610      	mov	r0, r2
 80028f4:	4619      	mov	r1, r3
 80028f6:	ebb0 0008 	subs.w	r0, r0, r8
 80028fa:	eb61 0109 	sbc.w	r1, r1, r9
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	018b      	lsls	r3, r1, #6
 8002908:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800290c:	0182      	lsls	r2, r0, #6
 800290e:	1a12      	subs	r2, r2, r0
 8002910:	eb63 0301 	sbc.w	r3, r3, r1
 8002914:	f04f 0000 	mov.w	r0, #0
 8002918:	f04f 0100 	mov.w	r1, #0
 800291c:	00d9      	lsls	r1, r3, #3
 800291e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002922:	00d0      	lsls	r0, r2, #3
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	eb12 0208 	adds.w	r2, r2, r8
 800292c:	eb43 0309 	adc.w	r3, r3, r9
 8002930:	f04f 0000 	mov.w	r0, #0
 8002934:	f04f 0100 	mov.w	r1, #0
 8002938:	0259      	lsls	r1, r3, #9
 800293a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800293e:	0250      	lsls	r0, r2, #9
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4610      	mov	r0, r2
 8002946:	4619      	mov	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	461a      	mov	r2, r3
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	f7fd fc42 	bl	80001d8 <__aeabi_uldivmod>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4613      	mov	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	e04a      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800295e:	4b31      	ldr	r3, [pc, #196]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	099b      	lsrs	r3, r3, #6
 8002964:	461a      	mov	r2, r3
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800296e:	f04f 0100 	mov.w	r1, #0
 8002972:	ea02 0400 	and.w	r4, r2, r0
 8002976:	ea03 0501 	and.w	r5, r3, r1
 800297a:	4620      	mov	r0, r4
 800297c:	4629      	mov	r1, r5
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	014b      	lsls	r3, r1, #5
 8002988:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800298c:	0142      	lsls	r2, r0, #5
 800298e:	4610      	mov	r0, r2
 8002990:	4619      	mov	r1, r3
 8002992:	1b00      	subs	r0, r0, r4
 8002994:	eb61 0105 	sbc.w	r1, r1, r5
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	018b      	lsls	r3, r1, #6
 80029a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029a6:	0182      	lsls	r2, r0, #6
 80029a8:	1a12      	subs	r2, r2, r0
 80029aa:	eb63 0301 	sbc.w	r3, r3, r1
 80029ae:	f04f 0000 	mov.w	r0, #0
 80029b2:	f04f 0100 	mov.w	r1, #0
 80029b6:	00d9      	lsls	r1, r3, #3
 80029b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029bc:	00d0      	lsls	r0, r2, #3
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	1912      	adds	r2, r2, r4
 80029c4:	eb45 0303 	adc.w	r3, r5, r3
 80029c8:	f04f 0000 	mov.w	r0, #0
 80029cc:	f04f 0100 	mov.w	r1, #0
 80029d0:	0299      	lsls	r1, r3, #10
 80029d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80029d6:	0290      	lsls	r0, r2, #10
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4610      	mov	r0, r2
 80029de:	4619      	mov	r1, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	f7fd fbf6 	bl	80001d8 <__aeabi_uldivmod>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4613      	mov	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	0c1b      	lsrs	r3, r3, #16
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	3301      	adds	r3, #1
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0c:	60bb      	str	r3, [r7, #8]
      break;
 8002a0e:	e002      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a12:	60bb      	str	r3, [r7, #8]
      break;
 8002a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a16:	68bb      	ldr	r3, [r7, #8]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800
 8002a28:	00f42400 	.word	0x00f42400
 8002a2c:	007a1200 	.word	0x007a1200

08002a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a34:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a36:	681b      	ldr	r3, [r3, #0]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	20000000 	.word	0x20000000

08002a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a4c:	f7ff fff0 	bl	8002a30 <HAL_RCC_GetHCLKFreq>
 8002a50:	4602      	mov	r2, r0
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	0a9b      	lsrs	r3, r3, #10
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4903      	ldr	r1, [pc, #12]	; (8002a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a5e:	5ccb      	ldrb	r3, [r1, r3]
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	080032ec 	.word	0x080032ec

08002a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a74:	f7ff ffdc 	bl	8002a30 <HAL_RCC_GetHCLKFreq>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	0b5b      	lsrs	r3, r3, #13
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	4903      	ldr	r1, [pc, #12]	; (8002a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a86:	5ccb      	ldrb	r3, [r1, r3]
 8002a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40023800 	.word	0x40023800
 8002a94:	080032ec 	.word	0x080032ec

08002a98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e03f      	b.n	8002b2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe f812 	bl	8000ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2224      	movs	r2, #36	; 0x24
 8002ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ada:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f829 	bl	8002b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b38:	b0bd      	sub	sp, #244	; 0xf4
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b50:	68d9      	ldr	r1, [r3, #12]
 8002b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	ea40 0301 	orr.w	r3, r0, r1
 8002b5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8002b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b8c:	f021 010c 	bic.w	r1, r1, #12
 8002b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002b9a:	430b      	orrs	r3, r1
 8002b9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bae:	6999      	ldr	r1, [r3, #24]
 8002bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	ea40 0301 	orr.w	r3, r0, r1
 8002bba:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc6:	f040 81a5 	bne.w	8002f14 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4bcd      	ldr	r3, [pc, #820]	; (8002f08 <UART_SetConfig+0x3d4>)
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d006      	beq.n	8002be4 <UART_SetConfig+0xb0>
 8002bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4bcb      	ldr	r3, [pc, #812]	; (8002f0c <UART_SetConfig+0x3d8>)
 8002bde:	429a      	cmp	r2, r3
 8002be0:	f040 80cb 	bne.w	8002d7a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002be4:	f7ff ff44 	bl	8002a70 <HAL_RCC_GetPCLK2Freq>
 8002be8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002bf0:	461c      	mov	r4, r3
 8002bf2:	f04f 0500 	mov.w	r5, #0
 8002bf6:	4622      	mov	r2, r4
 8002bf8:	462b      	mov	r3, r5
 8002bfa:	1891      	adds	r1, r2, r2
 8002bfc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8002c00:	415b      	adcs	r3, r3
 8002c02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002c06:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002c0a:	1912      	adds	r2, r2, r4
 8002c0c:	eb45 0303 	adc.w	r3, r5, r3
 8002c10:	f04f 0000 	mov.w	r0, #0
 8002c14:	f04f 0100 	mov.w	r1, #0
 8002c18:	00d9      	lsls	r1, r3, #3
 8002c1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c1e:	00d0      	lsls	r0, r2, #3
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	1911      	adds	r1, r2, r4
 8002c26:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8002c2a:	416b      	adcs	r3, r5
 8002c2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	461a      	mov	r2, r3
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	1891      	adds	r1, r2, r2
 8002c3e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8002c42:	415b      	adcs	r3, r3
 8002c44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c48:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002c4c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002c50:	f7fd fac2 	bl	80001d8 <__aeabi_uldivmod>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4bad      	ldr	r3, [pc, #692]	; (8002f10 <UART_SetConfig+0x3dc>)
 8002c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	011e      	lsls	r6, r3, #4
 8002c62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c66:	461c      	mov	r4, r3
 8002c68:	f04f 0500 	mov.w	r5, #0
 8002c6c:	4622      	mov	r2, r4
 8002c6e:	462b      	mov	r3, r5
 8002c70:	1891      	adds	r1, r2, r2
 8002c72:	67b9      	str	r1, [r7, #120]	; 0x78
 8002c74:	415b      	adcs	r3, r3
 8002c76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c78:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002c7c:	1912      	adds	r2, r2, r4
 8002c7e:	eb45 0303 	adc.w	r3, r5, r3
 8002c82:	f04f 0000 	mov.w	r0, #0
 8002c86:	f04f 0100 	mov.w	r1, #0
 8002c8a:	00d9      	lsls	r1, r3, #3
 8002c8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c90:	00d0      	lsls	r0, r2, #3
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	1911      	adds	r1, r2, r4
 8002c98:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8002c9c:	416b      	adcs	r3, r5
 8002c9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	1891      	adds	r1, r2, r2
 8002cb0:	6739      	str	r1, [r7, #112]	; 0x70
 8002cb2:	415b      	adcs	r3, r3
 8002cb4:	677b      	str	r3, [r7, #116]	; 0x74
 8002cb6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002cba:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002cbe:	f7fd fa8b 	bl	80001d8 <__aeabi_uldivmod>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4b92      	ldr	r3, [pc, #584]	; (8002f10 <UART_SetConfig+0x3dc>)
 8002cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	2164      	movs	r1, #100	; 0x64
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	3332      	adds	r3, #50	; 0x32
 8002cda:	4a8d      	ldr	r2, [pc, #564]	; (8002f10 <UART_SetConfig+0x3dc>)
 8002cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce0:	095b      	lsrs	r3, r3, #5
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ce8:	441e      	add	r6, r3
 8002cea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f04f 0100 	mov.w	r1, #0
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	1894      	adds	r4, r2, r2
 8002cfa:	66bc      	str	r4, [r7, #104]	; 0x68
 8002cfc:	415b      	adcs	r3, r3
 8002cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d00:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002d04:	1812      	adds	r2, r2, r0
 8002d06:	eb41 0303 	adc.w	r3, r1, r3
 8002d0a:	f04f 0400 	mov.w	r4, #0
 8002d0e:	f04f 0500 	mov.w	r5, #0
 8002d12:	00dd      	lsls	r5, r3, #3
 8002d14:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d18:	00d4      	lsls	r4, r2, #3
 8002d1a:	4622      	mov	r2, r4
 8002d1c:	462b      	mov	r3, r5
 8002d1e:	1814      	adds	r4, r2, r0
 8002d20:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8002d24:	414b      	adcs	r3, r1
 8002d26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	461a      	mov	r2, r3
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	1891      	adds	r1, r2, r2
 8002d38:	6639      	str	r1, [r7, #96]	; 0x60
 8002d3a:	415b      	adcs	r3, r3
 8002d3c:	667b      	str	r3, [r7, #100]	; 0x64
 8002d3e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002d42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d46:	f7fd fa47 	bl	80001d8 <__aeabi_uldivmod>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4b70      	ldr	r3, [pc, #448]	; (8002f10 <UART_SetConfig+0x3dc>)
 8002d50:	fba3 1302 	umull	r1, r3, r3, r2
 8002d54:	095b      	lsrs	r3, r3, #5
 8002d56:	2164      	movs	r1, #100	; 0x64
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	3332      	adds	r3, #50	; 0x32
 8002d62:	4a6b      	ldr	r2, [pc, #428]	; (8002f10 <UART_SetConfig+0x3dc>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	095b      	lsrs	r3, r3, #5
 8002d6a:	f003 0207 	and.w	r2, r3, #7
 8002d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4432      	add	r2, r6
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	e26d      	b.n	8003256 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d7a:	f7ff fe65 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8002d7e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002d86:	461c      	mov	r4, r3
 8002d88:	f04f 0500 	mov.w	r5, #0
 8002d8c:	4622      	mov	r2, r4
 8002d8e:	462b      	mov	r3, r5
 8002d90:	1891      	adds	r1, r2, r2
 8002d92:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d94:	415b      	adcs	r3, r3
 8002d96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d9c:	1912      	adds	r2, r2, r4
 8002d9e:	eb45 0303 	adc.w	r3, r5, r3
 8002da2:	f04f 0000 	mov.w	r0, #0
 8002da6:	f04f 0100 	mov.w	r1, #0
 8002daa:	00d9      	lsls	r1, r3, #3
 8002dac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002db0:	00d0      	lsls	r0, r2, #3
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	1911      	adds	r1, r2, r4
 8002db8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8002dbc:	416b      	adcs	r3, r5
 8002dbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	1891      	adds	r1, r2, r2
 8002dd0:	6539      	str	r1, [r7, #80]	; 0x50
 8002dd2:	415b      	adcs	r3, r3
 8002dd4:	657b      	str	r3, [r7, #84]	; 0x54
 8002dd6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002dda:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002dde:	f7fd f9fb 	bl	80001d8 <__aeabi_uldivmod>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4b4a      	ldr	r3, [pc, #296]	; (8002f10 <UART_SetConfig+0x3dc>)
 8002de8:	fba3 2302 	umull	r2, r3, r3, r2
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	011e      	lsls	r6, r3, #4
 8002df0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002df4:	461c      	mov	r4, r3
 8002df6:	f04f 0500 	mov.w	r5, #0
 8002dfa:	4622      	mov	r2, r4
 8002dfc:	462b      	mov	r3, r5
 8002dfe:	1891      	adds	r1, r2, r2
 8002e00:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e02:	415b      	adcs	r3, r3
 8002e04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e06:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e0a:	1912      	adds	r2, r2, r4
 8002e0c:	eb45 0303 	adc.w	r3, r5, r3
 8002e10:	f04f 0000 	mov.w	r0, #0
 8002e14:	f04f 0100 	mov.w	r1, #0
 8002e18:	00d9      	lsls	r1, r3, #3
 8002e1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e1e:	00d0      	lsls	r0, r2, #3
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	1911      	adds	r1, r2, r4
 8002e26:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8002e2a:	416b      	adcs	r3, r5
 8002e2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	461a      	mov	r2, r3
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	1891      	adds	r1, r2, r2
 8002e3e:	6439      	str	r1, [r7, #64]	; 0x40
 8002e40:	415b      	adcs	r3, r3
 8002e42:	647b      	str	r3, [r7, #68]	; 0x44
 8002e44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e48:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002e4c:	f7fd f9c4 	bl	80001d8 <__aeabi_uldivmod>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4b2e      	ldr	r3, [pc, #184]	; (8002f10 <UART_SetConfig+0x3dc>)
 8002e56:	fba3 1302 	umull	r1, r3, r3, r2
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	2164      	movs	r1, #100	; 0x64
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	3332      	adds	r3, #50	; 0x32
 8002e68:	4a29      	ldr	r2, [pc, #164]	; (8002f10 <UART_SetConfig+0x3dc>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e76:	441e      	add	r6, r3
 8002e78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f04f 0100 	mov.w	r1, #0
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	1894      	adds	r4, r2, r2
 8002e88:	63bc      	str	r4, [r7, #56]	; 0x38
 8002e8a:	415b      	adcs	r3, r3
 8002e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e8e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e92:	1812      	adds	r2, r2, r0
 8002e94:	eb41 0303 	adc.w	r3, r1, r3
 8002e98:	f04f 0400 	mov.w	r4, #0
 8002e9c:	f04f 0500 	mov.w	r5, #0
 8002ea0:	00dd      	lsls	r5, r3, #3
 8002ea2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ea6:	00d4      	lsls	r4, r2, #3
 8002ea8:	4622      	mov	r2, r4
 8002eaa:	462b      	mov	r3, r5
 8002eac:	1814      	adds	r4, r2, r0
 8002eae:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8002eb2:	414b      	adcs	r3, r1
 8002eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	1891      	adds	r1, r2, r2
 8002ec6:	6339      	str	r1, [r7, #48]	; 0x30
 8002ec8:	415b      	adcs	r3, r3
 8002eca:	637b      	str	r3, [r7, #52]	; 0x34
 8002ecc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ed0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ed4:	f7fd f980 	bl	80001d8 <__aeabi_uldivmod>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <UART_SetConfig+0x3dc>)
 8002ede:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	2164      	movs	r1, #100	; 0x64
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	3332      	adds	r3, #50	; 0x32
 8002ef0:	4a07      	ldr	r2, [pc, #28]	; (8002f10 <UART_SetConfig+0x3dc>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	f003 0207 	and.w	r2, r3, #7
 8002efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4432      	add	r2, r6
 8002f04:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002f06:	e1a6      	b.n	8003256 <UART_SetConfig+0x722>
 8002f08:	40011000 	.word	0x40011000
 8002f0c:	40011400 	.word	0x40011400
 8002f10:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	4bd1      	ldr	r3, [pc, #836]	; (8003260 <UART_SetConfig+0x72c>)
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d006      	beq.n	8002f2e <UART_SetConfig+0x3fa>
 8002f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	4bcf      	ldr	r3, [pc, #828]	; (8003264 <UART_SetConfig+0x730>)
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	f040 80ca 	bne.w	80030c2 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f2e:	f7ff fd9f 	bl	8002a70 <HAL_RCC_GetPCLK2Freq>
 8002f32:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f3a:	461c      	mov	r4, r3
 8002f3c:	f04f 0500 	mov.w	r5, #0
 8002f40:	4622      	mov	r2, r4
 8002f42:	462b      	mov	r3, r5
 8002f44:	1891      	adds	r1, r2, r2
 8002f46:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f48:	415b      	adcs	r3, r3
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f50:	1912      	adds	r2, r2, r4
 8002f52:	eb45 0303 	adc.w	r3, r5, r3
 8002f56:	f04f 0000 	mov.w	r0, #0
 8002f5a:	f04f 0100 	mov.w	r1, #0
 8002f5e:	00d9      	lsls	r1, r3, #3
 8002f60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f64:	00d0      	lsls	r0, r2, #3
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	eb12 0a04 	adds.w	sl, r2, r4
 8002f6e:	eb43 0b05 	adc.w	fp, r3, r5
 8002f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f04f 0100 	mov.w	r1, #0
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	008b      	lsls	r3, r1, #2
 8002f88:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f8c:	0082      	lsls	r2, r0, #2
 8002f8e:	4650      	mov	r0, sl
 8002f90:	4659      	mov	r1, fp
 8002f92:	f7fd f921 	bl	80001d8 <__aeabi_uldivmod>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4bb3      	ldr	r3, [pc, #716]	; (8003268 <UART_SetConfig+0x734>)
 8002f9c:	fba3 2302 	umull	r2, r3, r3, r2
 8002fa0:	095b      	lsrs	r3, r3, #5
 8002fa2:	011e      	lsls	r6, r3, #4
 8002fa4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f04f 0100 	mov.w	r1, #0
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	1894      	adds	r4, r2, r2
 8002fb4:	623c      	str	r4, [r7, #32]
 8002fb6:	415b      	adcs	r3, r3
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fbe:	1812      	adds	r2, r2, r0
 8002fc0:	eb41 0303 	adc.w	r3, r1, r3
 8002fc4:	f04f 0400 	mov.w	r4, #0
 8002fc8:	f04f 0500 	mov.w	r5, #0
 8002fcc:	00dd      	lsls	r5, r3, #3
 8002fce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002fd2:	00d4      	lsls	r4, r2, #3
 8002fd4:	4622      	mov	r2, r4
 8002fd6:	462b      	mov	r3, r5
 8002fd8:	1814      	adds	r4, r2, r0
 8002fda:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002fde:	414b      	adcs	r3, r1
 8002fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f04f 0100 	mov.w	r1, #0
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	008b      	lsls	r3, r1, #2
 8002ffa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ffe:	0082      	lsls	r2, r0, #2
 8003000:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8003004:	f7fd f8e8 	bl	80001d8 <__aeabi_uldivmod>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4b96      	ldr	r3, [pc, #600]	; (8003268 <UART_SetConfig+0x734>)
 800300e:	fba3 1302 	umull	r1, r3, r3, r2
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	2164      	movs	r1, #100	; 0x64
 8003016:	fb01 f303 	mul.w	r3, r1, r3
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	3332      	adds	r3, #50	; 0x32
 8003020:	4a91      	ldr	r2, [pc, #580]	; (8003268 <UART_SetConfig+0x734>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800302c:	441e      	add	r6, r3
 800302e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003032:	4618      	mov	r0, r3
 8003034:	f04f 0100 	mov.w	r1, #0
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	1894      	adds	r4, r2, r2
 800303e:	61bc      	str	r4, [r7, #24]
 8003040:	415b      	adcs	r3, r3
 8003042:	61fb      	str	r3, [r7, #28]
 8003044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003048:	1812      	adds	r2, r2, r0
 800304a:	eb41 0303 	adc.w	r3, r1, r3
 800304e:	f04f 0400 	mov.w	r4, #0
 8003052:	f04f 0500 	mov.w	r5, #0
 8003056:	00dd      	lsls	r5, r3, #3
 8003058:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800305c:	00d4      	lsls	r4, r2, #3
 800305e:	4622      	mov	r2, r4
 8003060:	462b      	mov	r3, r5
 8003062:	1814      	adds	r4, r2, r0
 8003064:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8003068:	414b      	adcs	r3, r1
 800306a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800306e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4618      	mov	r0, r3
 8003076:	f04f 0100 	mov.w	r1, #0
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	008b      	lsls	r3, r1, #2
 8003084:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003088:	0082      	lsls	r2, r0, #2
 800308a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800308e:	f7fd f8a3 	bl	80001d8 <__aeabi_uldivmod>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4b74      	ldr	r3, [pc, #464]	; (8003268 <UART_SetConfig+0x734>)
 8003098:	fba3 1302 	umull	r1, r3, r3, r2
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	2164      	movs	r1, #100	; 0x64
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	3332      	adds	r3, #50	; 0x32
 80030aa:	4a6f      	ldr	r2, [pc, #444]	; (8003268 <UART_SetConfig+0x734>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	f003 020f 	and.w	r2, r3, #15
 80030b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4432      	add	r2, r6
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	e0c9      	b.n	8003256 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80030c2:	f7ff fcc1 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 80030c6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80030ce:	461c      	mov	r4, r3
 80030d0:	f04f 0500 	mov.w	r5, #0
 80030d4:	4622      	mov	r2, r4
 80030d6:	462b      	mov	r3, r5
 80030d8:	1891      	adds	r1, r2, r2
 80030da:	6139      	str	r1, [r7, #16]
 80030dc:	415b      	adcs	r3, r3
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80030e4:	1912      	adds	r2, r2, r4
 80030e6:	eb45 0303 	adc.w	r3, r5, r3
 80030ea:	f04f 0000 	mov.w	r0, #0
 80030ee:	f04f 0100 	mov.w	r1, #0
 80030f2:	00d9      	lsls	r1, r3, #3
 80030f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030f8:	00d0      	lsls	r0, r2, #3
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	eb12 0804 	adds.w	r8, r2, r4
 8003102:	eb43 0905 	adc.w	r9, r3, r5
 8003106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4618      	mov	r0, r3
 800310e:	f04f 0100 	mov.w	r1, #0
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	008b      	lsls	r3, r1, #2
 800311c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003120:	0082      	lsls	r2, r0, #2
 8003122:	4640      	mov	r0, r8
 8003124:	4649      	mov	r1, r9
 8003126:	f7fd f857 	bl	80001d8 <__aeabi_uldivmod>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	4b4e      	ldr	r3, [pc, #312]	; (8003268 <UART_SetConfig+0x734>)
 8003130:	fba3 2302 	umull	r2, r3, r3, r2
 8003134:	095b      	lsrs	r3, r3, #5
 8003136:	011e      	lsls	r6, r3, #4
 8003138:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800313c:	4618      	mov	r0, r3
 800313e:	f04f 0100 	mov.w	r1, #0
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	1894      	adds	r4, r2, r2
 8003148:	60bc      	str	r4, [r7, #8]
 800314a:	415b      	adcs	r3, r3
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003152:	1812      	adds	r2, r2, r0
 8003154:	eb41 0303 	adc.w	r3, r1, r3
 8003158:	f04f 0400 	mov.w	r4, #0
 800315c:	f04f 0500 	mov.w	r5, #0
 8003160:	00dd      	lsls	r5, r3, #3
 8003162:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003166:	00d4      	lsls	r4, r2, #3
 8003168:	4622      	mov	r2, r4
 800316a:	462b      	mov	r3, r5
 800316c:	1814      	adds	r4, r2, r0
 800316e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003172:	414b      	adcs	r3, r1
 8003174:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4618      	mov	r0, r3
 8003180:	f04f 0100 	mov.w	r1, #0
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	008b      	lsls	r3, r1, #2
 800318e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003192:	0082      	lsls	r2, r0, #2
 8003194:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003198:	f7fd f81e 	bl	80001d8 <__aeabi_uldivmod>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4b31      	ldr	r3, [pc, #196]	; (8003268 <UART_SetConfig+0x734>)
 80031a2:	fba3 1302 	umull	r1, r3, r3, r2
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	2164      	movs	r1, #100	; 0x64
 80031aa:	fb01 f303 	mul.w	r3, r1, r3
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	3332      	adds	r3, #50	; 0x32
 80031b4:	4a2c      	ldr	r2, [pc, #176]	; (8003268 <UART_SetConfig+0x734>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c0:	441e      	add	r6, r3
 80031c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80031c6:	4618      	mov	r0, r3
 80031c8:	f04f 0100 	mov.w	r1, #0
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	1894      	adds	r4, r2, r2
 80031d2:	603c      	str	r4, [r7, #0]
 80031d4:	415b      	adcs	r3, r3
 80031d6:	607b      	str	r3, [r7, #4]
 80031d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031dc:	1812      	adds	r2, r2, r0
 80031de:	eb41 0303 	adc.w	r3, r1, r3
 80031e2:	f04f 0400 	mov.w	r4, #0
 80031e6:	f04f 0500 	mov.w	r5, #0
 80031ea:	00dd      	lsls	r5, r3, #3
 80031ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031f0:	00d4      	lsls	r4, r2, #3
 80031f2:	4622      	mov	r2, r4
 80031f4:	462b      	mov	r3, r5
 80031f6:	1814      	adds	r4, r2, r0
 80031f8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80031fc:	414b      	adcs	r3, r1
 80031fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	4618      	mov	r0, r3
 800320a:	f04f 0100 	mov.w	r1, #0
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	008b      	lsls	r3, r1, #2
 8003218:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800321c:	0082      	lsls	r2, r0, #2
 800321e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8003222:	f7fc ffd9 	bl	80001d8 <__aeabi_uldivmod>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <UART_SetConfig+0x734>)
 800322c:	fba3 1302 	umull	r1, r3, r3, r2
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	2164      	movs	r1, #100	; 0x64
 8003234:	fb01 f303 	mul.w	r3, r1, r3
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	3332      	adds	r3, #50	; 0x32
 800323e:	4a0a      	ldr	r2, [pc, #40]	; (8003268 <UART_SetConfig+0x734>)
 8003240:	fba2 2303 	umull	r2, r3, r2, r3
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	f003 020f 	and.w	r2, r3, #15
 800324a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4432      	add	r2, r6
 8003252:	609a      	str	r2, [r3, #8]
}
 8003254:	e7ff      	b.n	8003256 <UART_SetConfig+0x722>
 8003256:	bf00      	nop
 8003258:	37f4      	adds	r7, #244	; 0xf4
 800325a:	46bd      	mov	sp, r7
 800325c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003260:	40011000 	.word	0x40011000
 8003264:	40011400 	.word	0x40011400
 8003268:	51eb851f 	.word	0x51eb851f

0800326c <__libc_init_array>:
 800326c:	b570      	push	{r4, r5, r6, lr}
 800326e:	4d0d      	ldr	r5, [pc, #52]	; (80032a4 <__libc_init_array+0x38>)
 8003270:	4c0d      	ldr	r4, [pc, #52]	; (80032a8 <__libc_init_array+0x3c>)
 8003272:	1b64      	subs	r4, r4, r5
 8003274:	10a4      	asrs	r4, r4, #2
 8003276:	2600      	movs	r6, #0
 8003278:	42a6      	cmp	r6, r4
 800327a:	d109      	bne.n	8003290 <__libc_init_array+0x24>
 800327c:	4d0b      	ldr	r5, [pc, #44]	; (80032ac <__libc_init_array+0x40>)
 800327e:	4c0c      	ldr	r4, [pc, #48]	; (80032b0 <__libc_init_array+0x44>)
 8003280:	f000 f820 	bl	80032c4 <_init>
 8003284:	1b64      	subs	r4, r4, r5
 8003286:	10a4      	asrs	r4, r4, #2
 8003288:	2600      	movs	r6, #0
 800328a:	42a6      	cmp	r6, r4
 800328c:	d105      	bne.n	800329a <__libc_init_array+0x2e>
 800328e:	bd70      	pop	{r4, r5, r6, pc}
 8003290:	f855 3b04 	ldr.w	r3, [r5], #4
 8003294:	4798      	blx	r3
 8003296:	3601      	adds	r6, #1
 8003298:	e7ee      	b.n	8003278 <__libc_init_array+0xc>
 800329a:	f855 3b04 	ldr.w	r3, [r5], #4
 800329e:	4798      	blx	r3
 80032a0:	3601      	adds	r6, #1
 80032a2:	e7f2      	b.n	800328a <__libc_init_array+0x1e>
 80032a4:	08003304 	.word	0x08003304
 80032a8:	08003304 	.word	0x08003304
 80032ac:	08003304 	.word	0x08003304
 80032b0:	08003308 	.word	0x08003308

080032b4 <memset>:
 80032b4:	4402      	add	r2, r0
 80032b6:	4603      	mov	r3, r0
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d100      	bne.n	80032be <memset+0xa>
 80032bc:	4770      	bx	lr
 80032be:	f803 1b01 	strb.w	r1, [r3], #1
 80032c2:	e7f9      	b.n	80032b8 <memset+0x4>

080032c4 <_init>:
 80032c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c6:	bf00      	nop
 80032c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ca:	bc08      	pop	{r3}
 80032cc:	469e      	mov	lr, r3
 80032ce:	4770      	bx	lr

080032d0 <_fini>:
 80032d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d2:	bf00      	nop
 80032d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032d6:	bc08      	pop	{r3}
 80032d8:	469e      	mov	lr, r3
 80032da:	4770      	bx	lr
